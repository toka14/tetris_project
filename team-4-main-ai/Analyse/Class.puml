@startuml klassediagram tetrisAI

title ==Class Diagram==

skinparam ClassAttributeIconSize 0
class Tetris{
    +shapes: {vormletter: int[][]}
    +grid: int[][]
    +currentShape: {x,y,shape}
    +colors: string[]
    +upcomingShape: {x,y,shape}
    +bag: shape[]
    +bagIndex: int
    +score: int
    +ai: boolean
    +movesTaken: int
    +Besturing()
    +MoveDown(): void
    +MoveLeft():void
    +MoveRight(): void
    +RotateShape():void
    +GetState(): state: {grid,currentShape,upcomingShape,bag,bagIndex,rndSeed,score}
    +LoadState(state): void
    +GetCummulativeHeight(): double
    +GetHoles():double
    +GetHolesArray():int[][]
    +GetRougness(): double
    +GetRelativeHeight(): double
    +GetHeigt(): double
    +Reset(): void
    -ClearRows(): void
    -ApplyShape(): void
    -RemoveShape(): void
    -NextShape(): void
    -GenerateBag(): void
    -Collides(scene: Grid, object: Shape): boolean
    -Rotate(shapematrix: int[][], times: int)
    -Transpone(array: int[]): void
    -Output(): void
    -UpdateScore(): void
}
class AI{
    -genomes: {-id: double,
        -rowsCleared: double,
        -weightedHeight: double,
        -cumulativeHeigth: double,
        -relativeHeight: double,
        -holes: double,
        -rougness: double}[]
    +AI()
    -CreateInitialPopulation(): void
    -EvaluateNextGenome(): void
    -Evolve(): void
    -MakeChild(mum: genome, dad: genome): genome
    -GetAllPossibleMoves():int[{}]
    -GetHighestRatedMoves(moves:int[{}]):{}
    -MakeNextMove(): void
}
class User{
    +User()
    +KeyHandler(): void
}
User ..> Tetris: gebruikt
AI .> Tetris: gebruikt
@enduml